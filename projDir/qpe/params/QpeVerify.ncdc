/**********************************************************************
 * TDRP params for QpeVerify
 **********************************************************************/

//======================================================================
//
// QpeVerify reads precip accumulation measurements from SPDB, and 
//   compares these with radar-derived QPE values stored in gridded files.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
//
// If set, debug messages will be printed with the appropriate level of 
//   detail.
//
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
//
// Used for registration with procmap.
//
//
// Type: string
//

instance = "ncdc";

//======================================================================
//
// PROGRAM MODES OF OPERATION.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operating mode.
//
// In REALTIME mode, the program waits for new input data, and reads 
//   data from the latest time back by a specified time margin. In ARCHIVE 
//   mode, the program reads all of the SPDB data within a given time 
//   interval, and processes it. For each SPDB precip entry, the QPE value 
//   is found in the gridded files and these two values are then compared.
//
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//

mode = ARCHIVE;

//======================================================================
//
// MEASURED PRECIP ACCUMULATION AT POINTS.
//
//======================================================================
 
///////////// measured_precip_spdb_url ////////////////
//
// URL for precip measurments.
//
// Measured precip accumulation is stored in XML format for Wx 
//   observations.
//
//
// Type: string
//

measured_precip_spdb_url = "$(DATA_DIR)/pecan/spdb/precip/ncdc";

///////////// realtime_max_valid_age_secs /////////////
//
// Max valid age of precip input data (secs).
//
// REALTIME mode only. This the max valid age for incoming data. Earlier 
//   data will be ignored.
//
//
// Type: int
//

realtime_max_valid_age_secs = 3600;

///////////// realtime_lookback_secs //////////////////
//
// How far back to look for realtime data (secs).
//
// REALTIME mode only.
//
//
// Type: int
//

realtime_lookback_secs = 21600;

///////////// accum_period_secs ///////////////////////
//
// Accumulation period for both measured and qpe data (secs).
//
// Accumulation period over which the measured and radar-estimated 
//   values are compared.
//
//
// Type: int
//

accum_period_secs = 86400;

///////////// max_valid_accum_mm //////////////////////
//
// Max valid accumulation in the measured data (mm).
//
// If the measured value exceeds this, it is ignored.
//
//
// Type: double
//

max_valid_accum_mm = 100;

//======================================================================
//
// GRIDDED QPE.
//
//======================================================================
 
///////////// qpe_url /////////////////////////////////
//
// URL for gridded QPE values.
//
// QPE is stored in grids in either MDV or netCDF. Both are accessed via 
//   the MDV interface.
//
//
// Type: string
//

qpe_url = "mdvp:://hail:0:pecan/mdv/qpe_running_24hr";

///////////// qpe_field_name //////////////////////////
//
// Name of QPE accumulation field in gridded files.
//
//
// Type: string
//

// qpe_field_name = "ACCUM_HYBRID";
// qpe_field_name = "ACCUM_PID";
// qpe_field_name = "ACCUM_ZH";
qpe_field_name = "ACCUM_Z_ZDR";

///////////// qpe_read_time_offset_secs ///////////////
//
// Time offset for searching for QPE data (secs).
//
// We search for the first QPE data before the measured data time plus 
//   the offset, and within this time margin. Generally this offset should 
//   be negative to ensure that we are comparing against the accumulation 
//   so far.
//
//
// Type: int
//

qpe_read_time_offset_secs = -120;

///////////// qpe_read_time_margin_secs ///////////////
//
// Time margin for searching for QPE data (secs).
//
// We search for the first QPE data before the measured data time plus 
//   the offset, and within this time margin.
//
//
// Type: int
//

qpe_read_time_margin_secs = 3600;

///////////// qpe_grid_margin /////////////////////////
//
// Margin around the measurement location (grid units).
//
// We compute the mean QPE value by considering the surrounding points. 
//   This is the number of grid points on each side of the measurement 
//   location to be used when computing the mean. If the margin is 0, only 
//   a single point is used. If the margin is 1, a 3x3 box is used to 
//   compute the mean value. If the margin is 2, a 5x5 box is used, etc.
//
//
// Type: int
//

qpe_grid_margin = 3;

///////////// max_valid_qpe_mm ////////////////////////
//
// Max valid accumulation in the QPE data (mm).
//
// If the QPE exceeds this, it is ignored.
//
//
// Type: double
//

max_valid_qpe_mm = 100;

//======================================================================
//
// USE BOUNDING BOX.
//
//======================================================================
 
///////////// constrain_using_bounding_box ////////////
//
// Option to limit data to within a given bounding box.
//
// If true, only stations within the box will be accepted.
//
//
// Type: boolean
//

constrain_using_bounding_box = TRUE;

///////////// bounding_box_min_lat ////////////////////
//
// Minimum latitude for bounding box.
//
//
// Type: double
//

bounding_box_min_lat = 35.9;

///////////// bounding_box_max_lat ////////////////////
//
// Maximum latitude for bounding box.
//
//
// Type: double
//

bounding_box_max_lat = 41.1;

///////////// bounding_box_min_lon ////////////////////
//
// Minimum longitude for bounding box.
//
//
// Type: double
//

bounding_box_min_lon = -102.2;

///////////// bounding_box_max_lon ////////////////////
//
// Maximum longitude for bounding box.
//
//
// Type: double
//

bounding_box_max_lon = -96.1;

