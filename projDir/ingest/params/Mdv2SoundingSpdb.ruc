/**********************************************************************
 * TDRP params for Mdv2SoundingSpdb
 **********************************************************************/

//======================================================================
//
// Mdv2SoundingSpdb reads MDV Cartesian grid files, samples the data at 
//   an array of specified points, loads the data as a sounding and writes 
//   the soundings to SPDB.
//
//======================================================================
 
//======================================================================
//
// DEBUG AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "ruc";

///////////// procmap_register_interval ///////////////
//
// Interval for registering with procmap (secs).
// Sometime this app will spend a long time writing the netCDF file, 
//   since compression can be quite time-consuming. Setting this to longer 
//   than 60 secs (say 180) gives the app more time to complete its work. 
//   The auto-restarter will restart any app which has not registered for 
//   twice the length of the register interval.
// Type: int
//

procmap_register_interval = 60;

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_dir ///////////////////////////////
//
// Input directory.
// Path of input directory.
// Type: string
//

input_dir = "$(DATA_DIR)/$(project)/mdv/ruc";

///////////// mode ////////////////////////////////////
//
// Operational mode.
// REALTIME: - waits for new data. ARCHIVE: uses start and end times. 
//   FILELIST: processes specified file list.
//
// Type: enum
// Options:
//     REALTIME
//     ARCHIVE
//     FILELIST
//

mode = REALTIME;

///////////// max_realtime_valid_age //////////////////
//
// Max age of input data.
// REALTIME mode only. Max age of input data for it to be valid.
// Minimum val: 0
// Type: int
//

max_realtime_valid_age = 30000;

///////////// latest_data_info_avail //////////////////
//
// Use _latest_data_info files to decide when new data has arrived.
// REALTIME mode only. If false, the directory input_dir is scanned for 
//   new files.
// Type: boolean
//

latest_data_info_avail = TRUE;

//======================================================================
//
// INPUT DATA FIELD NAMES.
//
//======================================================================
 
///////////// temp_field_name /////////////////////////
//
// Name of temperature field.
// Set to empty string if no temperature field.
// Type: string
//

temp_field_name = "TMP";

///////////// temp_units_are_kelvin ///////////////////
//
// Set to TRUE if temperature is in Kelvin.
// If false, temps are in Celsius. Also applies to dew-pt.
// Type: boolean
//

temp_units_are_kelvin = FALSE;

///////////// rh_field_name ///////////////////////////
//
// Name of relative humidity field.
// Set to empty string if no RH field is available.
// Type: string
//

rh_field_name = "RH";

///////////// compute_rh_from_dewpt ///////////////////
//
// Set to TRUE to compute relative humidity from dew-pt field.
// Type: boolean
//

compute_rh_from_dewpt = FALSE;

///////////// dewpt_field_name ////////////////////////
//
// Name of dew-pt field.
// Set to empty string if no dew-pt field.
// Type: string
//

dewpt_field_name = "";

///////////// u_wind_field_name ///////////////////////
//
// Name of field for X component of wind.
// Set to empty string if no X component of wind. Assumed to be in m/s.
// Type: string
//

u_wind_field_name = "UGRD";

///////////// v_wind_field_name ///////////////////////
//
// Name of field for Y component of wind.
// Set to empty string if no Y component of wind. Assumed to be in m/s.
// Type: string
//

v_wind_field_name = "VGRD";

///////////// w_wind_field_name ///////////////////////
//
// Name of field for Z component of wind.
// Set to empty string if no Z component of wind. Assumed to be in m/s.
// Type: string
//

w_wind_field_name = "VVEL";

///////////// pressure_field_name /////////////////////
//
// Name of pressure field.
// Set to empty string if no prssure field. Assumed to be in hPa. If 
//   this is missing, and the vertical levels are in pressure, the 
//   vertical level value will be used.
// Type: string
//

pressure_field_name = "Pressure";

///////////// height_field_name ///////////////////////
//
// Name of height field.
// Set to empty string if no height field. Assumed to be in km. If this 
//   is missing, and the vertical levels are in km, the vertical level 
//   value will be used.
// Type: string
//

height_field_name = "HGT";

///////////// heights_are_in_km ///////////////////////
//
// Set to TRUE if height values are in km instead of m.
// Type: boolean
//

heights_are_in_km = FALSE;

//======================================================================
//
// SAMPLING LOCATIONS.
//
//======================================================================
 
///////////// station_locations ///////////////////////
//
// Sampling locations.
//
// Type: struct
//   typedef struct {
//      string name;
//      double latitude;
//      double longitude;
//      double altitudeKm;
//   }
//
// 1D array - variable length.
//

station_locations = {
  // { "SPOL", 40.1233, -104.891, 1.55296},
  { "SPOL", 38.5535, -99.5361, 0.660},
  { "CHIL", 40.4464, -104.637, 1.432},
  { "PWNE", 40.8712, -104.714, 1.688},
  { "KEAX", 38.8102, -94.2645, 0.332},
  { "KFTG", 39.7866, -104.546, 1.709},
  { "KCYS", 41.1519, -104.806, 1.886},
  { "KPUX", 38.4595, -104.181, 1.634},
  { "KGLD", 39.3667, -101.700, 1.131},
  { "KGJX", 39.0622, -108.213, 3.064},
  { "KAMA", 35.2333, -101.709, 1.128},
  { "KABX", 35.1497, -106.824, 1.813},
  { "KRIW", 43.0661, -108.477, 1.716},
  { "KDDC", 37.7608, -99.9689, 0.813},
  { "KICT", 37.6544, -97.4431, 0.426},
  { "KINX", 36.1751, -95.5642, 0.228},
  { "KLNX", 41.9579, -100.576, 0.948},
  { "KOAX", 41.3204, -96.3668, 0.384},
  { "KTLX", 35.3334, -97.2778, 0.389},
  { "KSGF", 37.2352, -93.4004, 0.419},
  { "KTWX", 38.9969, -96.2326, 0.431},
  { "KUEX", 40.3208, -98.4419, 0.626},
  { "KVNX", 36.7406, -98.1277, 0.383},
  { "KARX", 43.8228, -91.1911, 0.413},
  { "KDVN", 41.6117, -90.5808, 0.259},
  { "KFSD", 43.5878, -96.7294, 0.455},
  { "KMPX", 44.8489, -93.5655, 0.335}
};

//======================================================================
//
// DATA OUTPUT.
//
//======================================================================
 
///////////// output_url //////////////////////////////
//
// Directory for output data.
// Type: string
//

output_url = "spdbp:://localhost::$(project)/spdb/sounding/ruc";

///////////// valid_period_secs ///////////////////////
//
// Valid age for sounding data.
// How long until the next sounding is expected?.
// Type: int
//

valid_period_secs = 43200;

