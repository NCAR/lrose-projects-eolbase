c/**********************************************************************
 * TDRP params for cedric2mdv
 **********************************************************************/

//======================================================================
//
// cedric2mdv converts a CEDRIC file to MDV.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "chill_spol";

//======================================================================
//
// MODE OF OPERATION.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operating mode.
// REALTIME: watches input_dir, waits for a new input files to arrive. 
//   ARCHIVE: processes files in input_dir between the start and end 
//   times. FILELIST: processes the list of file names specified on the 
//   command line.
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//     FILELIST
//

mode = REALTIME;

//======================================================================
//
// SIGN OF LATITUDE AND LONGITUDE.
//
//======================================================================
 
///////////// negate_latitude /////////////////////////
//
// Option to negate the value of latitude from the file.
// Cedric only seems to support positive latitudes.
// Type: boolean
//

negate_latitude = FALSE;

///////////// negate_longitude ////////////////////////
//
// Option to negate the value of longitude from the file.
// Cedric only seems to support positive longitudes.
// Type: boolean
//

negate_longitude = TRUE;

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_dir ///////////////////////////////
//
// Dir for input data files.
// This is used in REALTIME and ARCHIVE modes.
// Type: string
//

input_dir = "$(DATA_DIR)/$(project)/cedric/ddoppler/chill_spol";

///////////// use_ldata_info_file /////////////////////
//
// Option to use _latest_data_info file as input trigger.
// REALTIME mode only. If true, waits on _latest_data_info file. If 
//   false, scans the directory for new file.
// Type: boolean
//

use_ldata_info_file = FALSE;

///////////// max_realtime_valid_age //////////////////
//
// Max valid age of rdata input files in realtime mode (secs).
// This the max valid age for an incoming file. The program will wait 
//   for a data file more recent than this age.
// Minimum val: 1
// Type: int
//

max_realtime_valid_age = 86400;

///////////// input_file_extension ////////////////////
//
// Specify file extension.
// If empty, all extensions will be accepted.
// Type: string
//

input_file_extension = "ced";

//======================================================================
//
// OUTPUT FIELD DETAILS.
//
//======================================================================
 
///////////// specify_output_fields ///////////////////
//
// Option to specify which fields to write out.
// If false, all fields in the input file will be written to the output 
//   file.
// Type: boolean
//

specify_output_fields = FALSE;

///////////// output_fields ///////////////////////////
//
// Details of the output fields.
// We search for the cedric_name. If the input file contains the 
//   requested name, the field is added to the output file.
//
// Type: struct
//   typedef struct {
//      string cedric_name;
//      string output_name;
//      string units;
//   }
//
// 1D array - variable length.
//

output_fields = {
  { "U", "U", "m/s"},
  { "V", "V", "m/s"},
  { "W", "W", "m/s"},
  { "Vor", "Vor", "/s"},
  { "CONV", "CONV", "/s"}
};

///////////// output_encoding /////////////////////////
//
// Set encoding type for all output fields.
//
// Type: enum
// Options:
//     ENCODING_INT8
//     ENCODING_INT16
//     ENCODING_FLOAT32
//

output_encoding = ENCODING_INT16;

///////////// output_dir //////////////////////////////
//
// Output directory.
// Output data is written to this dir.
// Type: string
//

output_dir = "$(DATA_DIR)/$(project)/mdv/ddoppler/chill_spol";

///////////// data_set_source /////////////////////////
//
// Data set source details.
// This short string is placed in the MDV master header for 
//   documentation purposes.
// Type: string
//

data_set_source = "Converted by cedric2mdv.";

///////////// data_set_info ///////////////////////////
//
// Data set info.
// This long string is placed in the MDV master header for documentation 
//   purposes.
// Type: string
//

data_set_info = "Dual Doppler analysis between CHILL and SPOL";

